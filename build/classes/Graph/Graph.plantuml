@startuml

title __GRAPH's Class Diagram__\n

  namespace  {
    namespace raph {
      interface Graph.Digraph {
          {abstract} + areAdjacent()
          {abstract} + incidentEdges()
          {abstract} + insertEdge()
          {abstract} + insertEdge()
          {abstract} + outboundEdges()
      }
    }
  }
  

  namespace  {
    namespace raph {
      class Graph.DirectGraph {
          - edges : Map<E, Edge<E, V>>
          - firstVertex : Vertex<V>
          - vertices : Map<V, Vertex<V>>
          + BFS()
          + BFSearch()
          + DirectGraph()
          + DirectGraph()
          + areAdjacent()
          + edges()
          + getEdges()
          + getFirstVertex()
          + getVertices()
          + incidentEdges()
          + insertEdge()
          + insertEdge()
          + insertVertex()
          + mostReferencedVertex()
          + numEdges()
          + numVertices()
          + opposite()
          + outboundEdges()
          + removeEdge()
          + removeEdge()
          + removeVertex()
          + replace()
          + replace()
          + returnTop5()
          + setEdges()
          + setVertices()
          + vertices()
          - checkEdge()
          - checkVertex()
          - existsEdgeWith()
          - existsVertexWith()
          - getAdjacent()
          - getPath()
          - vertexOf()
      }
    }
  }
  

  namespace  {
    namespace raph {
      class Graph.DirectGraph.MyEdge {
          ~ destination : Vertex<V>
          ~ element : E
          ~ origin : Vertex<V>
          + element()
          + toString()
          + vertices()
          ~ MyEdge()
          ~ contains()
      }
    }
  }
  

  namespace  {
    namespace raph {
      class Graph.DirectGraph.MyVertex {
          ~ element : V
          + element()
          + toString()
          ~ MyVertex()
      }
    }
  }
  

  namespace  {
    namespace raph {
      interface Graph.Edge {
          {abstract} + element()
          {abstract} + vertices()
      }
    }
  }
  

  namespace  {
    namespace raph {
      interface Graph.Graph {
          {abstract} + areAdjacent()
          {abstract} + edges()
          {abstract} + incidentEdges()
          {abstract} + insertEdge()
          {abstract} + insertEdge()
          {abstract} + insertVertex()
          {abstract} + numEdges()
          {abstract} + numVertices()
          {abstract} + opposite()
          {abstract} + removeEdge()
          {abstract} + removeVertex()
          {abstract} + replace()
          {abstract} + replace()
          {abstract} + vertices()
      }
    }
  }
  

  namespace  {
    namespace raph {
      class Graph.InvalidEdgeException {
          + InvalidEdgeException()
          + InvalidEdgeException()
      }
    }
  }
  

  namespace  {
    namespace raph {
      class Graph.InvalidVertexException {
          + InvalidVertexException()
          + InvalidVertexException()
      }
    }
  }
  

  namespace  {
    namespace raph {
      interface Graph.Vertex {
          {abstract} + element()
      }
    }
  }
  

  Graph.DirectGraph .up.|> Graph.Digraph<V,E>
  Graph.DirectGraph .up.|> java.io.Serializable
  Graph.DirectGraph +-down- Graph.DirectGraph.MyEdge
  Graph.DirectGraph +-down- Graph.DirectGraph.MyVertex
  Graph.DirectGraph.MyEdge .up.|> Graph.Edge<E,V>
  Graph.DirectGraph.MyEdge .up.|> java.io.Serializable
  Graph.DirectGraph.MyVertex .up.|> Graph.Vertex<V>
  Graph.DirectGraph.MyVertex .up.|> java.io.Serializable


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
